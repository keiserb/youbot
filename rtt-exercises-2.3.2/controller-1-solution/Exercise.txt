                Orocos Application Exercise

Note: Make sure you understand the basic principles of building
Orocos components by reading the Component Builder's Manual
and making the 'hello world' exercises.

In this complex exercise, you'll need to extend existing components,
write scripts and extend the application XML file. See UseCase.txt
for a global overview of the application architecture.

* Requirements:

ROS users:
 - All exercises are valid ROS packages, compatible with rosmake. Make sure
   the exercises are present in your ROS_PACAKAGE_PATH
 - Use 'rosrun ocl deployer-gnulinux -s deployment/application.cpf -linfo' 
   to run the deployer application

Non-ROS users: 
 - Orocos RTT and OCL are installed in /usr/local. If not, modify
 the import statements in Deployer-site.cpf and deployment/application.cpf to point to 
 the correct location
 - The OCL 'deployer-...' application must be in your path such that
 the application can be started.

All:
 - This example requires the 'CMake' tool v2.6.3 or newer.
 - Eclipse is the prefered development environment. Install the 
 'CMake Editor' plugin and the 'Rinzo XML Editor' plugin. In order to have
 auto-completion, make sure that the Orocos install path is in your Eclipse
 include path (Project->Properties->C/C++ General->Paths)
 
* Documentation
 - By now you should have read the first chapters of the Component
 Builder's Manual. Scripting basics and State machine basics will
 be necessary too.
 - Read the Deployment Component Manual. It contains instructions
 for the XML format and how an Orocos application is created.
 - The UseCase.txt file contains the application architecture of
 this example. 

* First steps
 - run 'make'
 - Verify that the Orocos headers
 and libraries could be found. If not, run 'ccmake ..' from 'build/' and set the
 CMAKE_PREFIX_PATH path.
 - Run 'deployer-gnulinux --start deployment/application.cpf -linfo'
 The TaskBrowser should pop up and the DeploymentComponent should load
 your application.
 
* Exercises
 - See components/modeswitch/ModeSwitch.hpp/cpp, components/joystick/Joystick.hpp,
 components/controller/Controller.hpp, deployment/application.cpf, Deployer-site.cpf
 deployment/statemachine.osd and deployment/program.ops for the scattered
 instructions. The main idea is to add the ModeSwitch component to the application
 (it won't be loaded when you start with application.cpf) and then extend it
 such that it can run a scripting state machine.
 
 However simple this looks, most people need about 3 hours to finish all aspects
 of this interface (after having made the hello world examples.)
